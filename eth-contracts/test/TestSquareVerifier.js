// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
let Verifier = artifacts.require('SquareVerifier');
let proofData = require('./proof');

contract('TestSquareVerifier', accounts => {
    // - use the contents from proof.json generated from zokrates steps
    let proof_correct = proofData.inputs;
    let proof_wrong = [3,10];

    describe('TestSquareVerifier', function () {

        beforeEach(async function () {
            this.contract = await Verifier.new({from: accounts[0]});
        });

        it('Test verification with correct proof', async function () { 
            let result = await this.contract.verifyTx.call(proofData.proof.a, proofData.proof.b, proofData.proof.c, proof_correct, {from: accounts[0]});
            assert.equal(result, true, "Invalid proof");
        });

        it('Test verification with incorrect proof', async function () {
            let result2 = await this.contract.verifyTx.call(proofData.proof.a, proofData.proof.b, proofData.proof.c, proof_wrong, {from: accounts[0]});
            assert.equal(result2, false, "Invalid proof");
        });
    });
    
});